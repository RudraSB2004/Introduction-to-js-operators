Q1. Explain the Role of Operators in JavaScript. Why are They Essential in Programming?
Operators in JavaScript are symbols or keywords that allow you to perform operations on values and variables.
 They are essential because they enable calculations, comparisons, assignments, and logical operations, 
 which are fundamental to making decisions and manipulating data within a program. Without operators, 
 programming would be limited, as we wouldn’t be able to perform tasks like arithmetic calculations, data comparisons, or conditional checks.

Q2. Describe the Categorization of Operators in JavaScript Based on Their Functionality. Provide Examples for Each Category.
JavaScript operators can be categorized into several types:

Arithmetic Operators: Used for mathematical operations.

Examples: + (addition), - (subtraction), * (multiplication), / (division), % (modulus)
let sum = 5 + 3; // sum is 8
Assignment Operators: Used to assign values to variables.

Examples: = (assign), += (add and assign), -= (subtract and assign)
let a = 10;
a += 5; // a is now 15
Comparison Operators: Used to compare values, returning a boolean result.

Examples: == (equal to), === (strictly equal to), != (not equal), > (greater than), < (less than)
let isEqual = (5 == '5'); // true
let isStrictEqual = (5 === '5'); // false
Logical Operators: Used to perform logical operations.

Examples: && (logical AND), || (logical OR), ! (logical NOT)
let result = (5 > 3 && 2 < 4); // true

Bitwise Operators: Operate at the binary level.

Examples: & (AND), | (OR), ^ (XOR)
let bitwiseAnd = 5 & 3; // result is 1 (0101 & 0011)
Ternary Operator: A shorthand for conditional expressions.

Example: condition ? exprIfTrue : exprIfFalse
let age = 18;
let canVote = (age >= 18) ? 'Yes' : 'No'; // canVote is 'Yes'

Q3. Differentiate Between Unary, Binary, and Ternary Operators in JavaScript. Give Examples of Each.
Unary Operators: Operate on a single operand.

Example: ++ (increment), -- (decrement), ! (logical NOT)
let x = 5;
x++; // x becomes 6
Binary Operators: Operate on two operands.

Example: + (addition), - (subtraction)
let sum = 5 + 3; // sum is 8
Ternary Operator: Operates on three operands.

Example: condition ? exprIfTrue : exprIfFalse
let age = 18;
let canVote = (age >= 18) ? 'Yes' : 'No'; // canVote is 'Yes'



Here’s a comprehensive explanation and solution for each question.

Q1. Explain the Role of Operators in JavaScript. Why are They Essential in Programming?
Operators in JavaScript are symbols or keywords that allow you to perform operations on values and variables. They are essential because they enable calculations, comparisons, assignments, and logical operations, which are fundamental to making decisions and manipulating data within a program. Without operators, programming would be limited, as we wouldn’t be able to perform tasks like arithmetic calculations, data comparisons, or conditional checks.

Q2. Describe the Categorization of Operators in JavaScript Based on Their Functionality. Provide Examples for Each Category.
JavaScript operators can be categorized into several types:

Arithmetic Operators: Used for mathematical operations.

Examples: + (addition), - (subtraction), * (multiplication), / (division), % (modulus)
javascript
Copy code
let sum = 5 + 3; // sum is 8
Assignment Operators: Used to assign values to variables.

Examples: = (assign), += (add and assign), -= (subtract and assign)
javascript
Copy code
let a = 10;
a += 5; // a is now 15
Comparison Operators: Used to compare values, returning a boolean result.

Examples: == (equal to), === (strictly equal to), != (not equal), > (greater than), < (less than)
javascript
Copy code
let isEqual = (5 == '5'); // true
let isStrictEqual = (5 === '5'); // false
Logical Operators: Used to perform logical operations.

Examples: && (logical AND), || (logical OR), ! (logical NOT)
javascript
Copy code
let result = (5 > 3 && 2 < 4); // true
Bitwise Operators: Operate at the binary level.

Examples: & (AND), | (OR), ^ (XOR)
javascript
Copy code
let bitwiseAnd = 5 & 3; // result is 1 (0101 & 0011)
Ternary Operator: A shorthand for conditional expressions.

Example: condition ? exprIfTrue : exprIfFalse
javascript
Copy code
let age = 18;
let canVote = (age >= 18) ? 'Yes' : 'No'; // canVote is 'Yes'
Q3. Differentiate Between Unary, Binary, and Ternary Operators in JavaScript. Give Examples of Each.
Unary Operators: Operate on a single operand.

Example: ++ (increment), -- (decrement), ! (logical NOT)
javascript
Copy code
let x = 5;
x++; // x becomes 6
Binary Operators: Operate on two operands.

Example: + (addition), - (subtraction)
javascript
Copy code
let sum = 5 + 3; // sum is 8
Ternary Operator: Operates on three operands.

Example: condition ? exprIfTrue : exprIfFalse
javascript
Copy code
let age = 18;
let canVote = (age >= 18) ? 'Yes' : 'No'; // canVote is 'Yes'
Q4. Discuss the Precedence and Associativity of Operators in JavaScript. Why Is Understanding These Concepts Important?
Precedence determines the order in which operations are performed in expressions with multiple operators. 
Associativity defines the direction in which operators with the same precedence level are evaluated. 
Operators can be left-associative (evaluated from left to right) or right-associative (evaluated from right to left).

Understanding precedence and associativity is crucial because they affect the outcome of complex expressions. For example:
let result = 5 + 3 * 2; // Result is 11, not 16, because * has higher precedence than +
Without knowledge of these concepts, you may end up with unexpected results in your code.


Here’s a comprehensive explanation and solution for each question.

Q1. Explain the Role of Operators in JavaScript. Why are They Essential in Programming?
Operators in JavaScript are symbols or keywords that allow you to perform operations on values and variables. They are essential because they enable calculations, comparisons, assignments, and logical operations, which are fundamental to making decisions and manipulating data within a program. Without operators, programming would be limited, as we wouldn’t be able to perform tasks like arithmetic calculations, data comparisons, or conditional checks.

Q2. Describe the Categorization of Operators in JavaScript Based on Their Functionality. Provide Examples for Each Category.
JavaScript operators can be categorized into several types:

Arithmetic Operators: Used for mathematical operations.

Examples: + (addition), - (subtraction), * (multiplication), / (division), % (modulus)
javascript
Copy code
let sum = 5 + 3; // sum is 8
Assignment Operators: Used to assign values to variables.

Examples: = (assign), += (add and assign), -= (subtract and assign)
javascript
Copy code
let a = 10;
a += 5; // a is now 15
Comparison Operators: Used to compare values, returning a boolean result.

Examples: == (equal to), === (strictly equal to), != (not equal), > (greater than), < (less than)
javascript
Copy code
let isEqual = (5 == '5'); // true
let isStrictEqual = (5 === '5'); // false
Logical Operators: Used to perform logical operations.

Examples: && (logical AND), || (logical OR), ! (logical NOT)
javascript
Copy code
let result = (5 > 3 && 2 < 4); // true
Bitwise Operators: Operate at the binary level.

Examples: & (AND), | (OR), ^ (XOR)
javascript
Copy code
let bitwiseAnd = 5 & 3; // result is 1 (0101 & 0011)
Ternary Operator: A shorthand for conditional expressions.

Example: condition ? exprIfTrue : exprIfFalse
javascript
Copy code
let age = 18;
let canVote = (age >= 18) ? 'Yes' : 'No'; // canVote is 'Yes'
Q3. Differentiate Between Unary, Binary, and Ternary Operators in JavaScript. Give Examples of Each.
Unary Operators: Operate on a single operand.

Example: ++ (increment), -- (decrement), ! (logical NOT)
javascript
Copy code
let x = 5;
x++; // x becomes 6
Binary Operators: Operate on two operands.

Example: + (addition), - (subtraction)
javascript
Copy code
let sum = 5 + 3; // sum is 8
Ternary Operator: Operates on three operands.

Example: condition ? exprIfTrue : exprIfFalse
javascript
Copy code
let age = 18;
let canVote = (age >= 18) ? 'Yes' : 'No'; // canVote is 'Yes'
Q4. Discuss the Precedence and Associativity of Operators in JavaScript. Why Is Understanding These Concepts Important?
Precedence determines the order in which operations are performed in expressions with multiple operators. Associativity defines the direction in which operators with the same precedence level are evaluated. Operators can be left-associative (evaluated from left to right) or right-associative (evaluated from right to left).

Understanding precedence and associativity is crucial because they affect the outcome of complex expressions. For example:

javascript
Copy code
let result = 5 + 3 * 2; // Result is 11, not 16, because * has higher precedence than +
Without knowledge of these concepts, you may end up with unexpected results in your code.

Q5. Write a JavaScript Program That Calculates the Simple Interest Using the Formula
// Simple Interest = (principal * rate * time) / 100

function calculateSimpleInterest(principal, rate, time) {
  return (principal * rate * time) / 100;
}

let principal = 1000;
let rate = 5;
let time = 2;
let simpleInterest = calculateSimpleInterest(principal, rate, time);
console.log("Simple Interest:", simpleInterest);
